<%#
 Copyright 2020-2024 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.config;

import io.mongock.driver.mongodb.sync.v4.driver.MongoSync4Driver;
import io.mongock.runner.standalone.MongockStandalone;
import io.mongock.api.annotations.ChangeUnit;
import com.mongodb.MongoClientSettings;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.oracle.svm.core.annotate.AutomaticFeature;
import io.quarkus.runtime.StartupEvent;
import org.eclipse.microprofile.config.inject.ConfigProperty;
import org.graalvm.nativeimage.hosted.Feature;
import org.graalvm.nativeimage.hosted.RuntimeReflection;
import org.reflections.Reflections;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Observes;
import jakarta.inject.Inject;
import java.util.List;
import java.util.stream.Collectors;

@ApplicationScoped
public class MongockConfiguration {

  @Inject
  MongoClient mongoClient;

  @ConfigProperty(name = "quarkus.mongodb.database")
  String databaseName;

  void onStart(@Observes StartupEvent ev) {
    var driver = MongoSync4Driver.withDefaultLock(mongoClient, databaseName);
    driver.disableTransaction();

    MongockStandalone
      .builder()
      .setDriver(driver)
      .addMigrationScanPackage("<%=packageName%>.config.dbmigrations")
      .buildRunner()
      .execute();
  }

  @AutomaticFeature
  private static class NativeSupport implements Feature {
    @Override
    public void beforeAnalysis(BeforeAnalysisAccess access) {
      new Reflections("<%=packageName%>.config.dbmigrations")
        .getTypesAnnotatedWith(ChangeUnit.class).forEach(clazz -> {
          RuntimeReflection.register(clazz);
          RuntimeReflection.register(clazz.getConstructors());
          RuntimeReflection.register(clazz.getMethods());
      });
    }
  }
}
